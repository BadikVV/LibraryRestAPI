@page "/subscription"
@using LibraryRestAPI.DTOs
@inject HttpClient Http
@inject NavigationManager _nav
@inject IJSRuntime _js
<PageTitle>Subscription</PageTitle>

<h1>Subscriptions</h1>

<p>This component demonstrates fetching data from the server.</p>
<MudButton @onclick="@(() => _nav.NavigateTo("/create_subscription"))" Color="Color.Secondary">Add Subscription</MudButton>
<MudTable ServerData="@(new Func<TableState, Task<TableData<SubscriptionDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="_table">
    <ToolBarContent>
        <MudText Typo="Typo.h5">Subscriptions</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="Name" T="BookDto">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Surname" T="BookDto">Surname</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Patronymic" T="BookDto">Patronymic</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="PhoneNumber" T="BookDto">PhoneNumber</MudTableSortLabel></MudTh>
        <MudTh>Active</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Surname">@context.Surname</MudTd>
        <MudTd DataLabel="Patronymic">@context.Patronymic</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
        <MudButton @onclick="@(() => _nav.NavigateTo("update_subscription/" + context.Id))" Color="Color.Primary">Update</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(()=> Delete(context.Id))">Delete</MudButton>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
}

@code {
    private MudTable<SubscriptionDto> _table;

    private int _totalItems;
    private string _searchString;
    
    private async Task Delete(Guid id)
    {
        var confirm = await _js.InvokeAsync<bool>("confirm", "Do you want to delete this subscription?");
        if (confirm)
        {
            var delete = await Http.DeleteAsync("https://localhost:7060/api/subscription/" + id);
            _table.ReloadServerData();
        }
    }

    private async Task<TableData<SubscriptionDto>> ServerReload(TableState state)
    {
        var orderDirection = "asc";
        if (state.SortDirection == SortDirection.Descending)
        {
            orderDirection = "desc";
        }
        if (state.SortDirection == SortDirection.None)
        {
            orderDirection = "";
        }

        var response = await Http.GetFromJsonAsync<PaginatedListAPIResponse<SubscriptionDto>>(
            $"https://localhost:7060/api/subscription/list?pageNumber={state.Page + 1}&pageSize={state.PageSize}" +
            $"&search={_searchString}&orderBy={state.SortLabel}&orderDirection={orderDirection}");
        _totalItems = response.Pagination.Total;
        return new TableData<SubscriptionDto>() {TotalItems = _totalItems, Items = response.Data};
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }
}